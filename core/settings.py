"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import random
import string
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = ''.join(random.choice(string.ascii_lowercase) for i in range(32))

# Render Deployment Code
DEBUG = True

# Docker HOST
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://localhost:5085']

CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.gis",

    'leaflet',  # used in admin
    'request',  # statistics
    'dbbackup',  # nightly backups
    'simple_history',  # object versioning
    'background_task',  # worker for background tasks
    "corsheaders",  # used to allow CORS requests
    'theme_pixel',
    'jsoneditor',  # json form
    "home",
    'sourcing',
]

MIDDLEWARE = [
    'core.otel.middlewares.RequestStartTimeMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "request.middleware.RequestMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
    'core.otel.middlewares.ResponseTimeMetricsMiddleware',
]

ROOT_URLCONF = "core.urls"

HOME_TEMPLATES = os.path.join(BASE_DIR, 'home', 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE = os.getenv('DB_ENGINE', None)
DB_USERNAME = os.getenv('DB_USERNAME', None)
DB_PASS = os.getenv('DB_PASS', None)
DB_HOST = os.getenv('DB_HOST', None)
DB_PORT = os.getenv('DB_PORT', None)
DB_NAME = os.getenv('DB_NAME', None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': DB_NAME,
            'USER': DB_USERNAME,
            'PASSWORD': DB_PASS,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "fr"

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'local_static')
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email
LOGIN_REDIRECT_URL = '/'
DEFAULT_FROM_EMAIL = "no-reply@confessio.fr"
EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_KEY')
AWS_SES_REGION_NAME = 'eu-west-3'
AWS_S3_REGION_NAME = 'eu-west-3'
AWS_STORAGE_BUCKET_NAME = 'confessio-uploaded-documents'

# Postgis
# https://stackoverflow.com/questions/67283705/m1-mac-geodjango-gdal-mach-o-but-wrong-architecture
if os.getenv('GDAL_LIBRARY_PATH'):
    GDAL_LIBRARY_PATH = os.getenv('GDAL_LIBRARY_PATH')
if os.getenv('GEOS_LIBRARY_PATH'):
    GEOS_LIBRARY_PATH = os.getenv('GEOS_LIBRARY_PATH')

# Dbbackup
DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DBBACKUP_STORAGE_OPTIONS = {
    'access_key': AWS_ACCESS_KEY_ID,
    'secret_key': AWS_SECRET_ACCESS_KEY,
    'bucket_name': os.environ.get('DBBACKUP_BUCKET') or 'confessio-dbbackup-daily',
    'default_acl': 'private',
}
DBBACKUP_CONNECTORS = {
    'default': {
        'DROP': False,
    }
}

# Background task
MAX_ATTEMPTS = 2
BACKGROUND_TASK_RUN_ASYNC = True

# Request (statistics)
REQUEST_LOG_IP = False
REQUEST_IGNORE_PATHS = (
    r'^admin/',
    r'^edit/',
    r'^moderate/',
)
REQUEST_IGNORE_USER_AGENTS = (
    r'^$',                    # ignore requests with no user agent string set
    r'Go-http-client',
    r'Googlebot',
    r'[bB]ingbot',
    r'Baiduspider',
    r'YandexBot',
    r'DuckDuckBot',
    r'Slurp',                 # Yahoo
    r'BLEXBot',
    r'Sogou Spider',
    r'Sogou web spider',  # Sogou's web crawler
    r'Exabot',
    r'MJ12bot',
    r'AhrefsBot',
    r'SemrushBot',
    r'DotBot',
    r'Yeti',                  # Naver
    r'SeznamBot',
    r'AddThis',
    r'SosoSpider',
    r'Facebot',               # Facebook
    r'facebookexternalhit',  # Facebook's link preview generator
    r'Instagram',  # Instagram's bot for link preview
    r'Twitterbot',
    r'LinkedInBot',
    r'Discordbot',
    r'TelegramBot',
    r'Pinterestbot',
    r'Tumblr',
    r'Applebot',
    r'WhatsApp',
    r'Discordbot',
    r'Slackbot',
    r'LineBot',
    r'Baidu-YunGuanCe',
    r'ia_archiver',  # Alexa's web crawler
    r'Bytespider',  # Alexa's web crawler
    r'uptime bot',
    r'Uptime Bot',
    r'fr_bot',
    r'Morningscore Bot',
    r'GPTBot',
    r'Amazonbot',
    r'Barkrowler',
)
REQUEST_TRAFFIC_MODULES = (
    'request.traffic.UniqueVisitor',
    'request.traffic.UniqueVisit',
    'request.traffic.Hit',
    'request.traffic.Search',
)
